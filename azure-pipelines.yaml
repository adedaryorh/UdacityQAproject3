name: Azure Pipeline

variables:
  - group: azsecret

stages:
  - stage: Provision
    jobs:
      - job: TerrafromTasks
        displayName: Terraform Tasks
        pool: myAgent
        steps:
        - task: DownloadSecureFile@1
          displayName: Download azsecret.conf file
          name: azsecret
          inputs:
            secureFile: 'azsecret.conf'
        - task: InstallSSHKey@0
          displayName: Install SSH Key
          inputs:
            knownHostsEntry: 'known_hosts'
            sshPublicKey: '$(public_key)'
            sshKeySecureFile: 'id_rsa'
            
        - task: TerraformInstaller@0
          displayName: Install terraform
          inputs:
            terraformVersion: 'latest'

        #- task: TerraformInstaller@0
          #displayName: Install Terraform
          #inputs:
            #terraformVersion: '1.2.9'
        - task: TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            commandOptions: '-backend-config=$(azsecret.secureFilePath)'
            backendType: 'azurerm'
            backendServiceArm: 'myServCon'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: 'tfstate16087'
            backendAzureRmContainerName: 'tfstate'
            allowTelemetryCollection: true
          
        - task: TerraformCLI@0
          displayName: Terraform Validate
          inputs:
            command: 'validate'
            allowTelemetryCollection: true    
        
        - task: AzureCLI@1
          displayName: Set Environment Variables for Terraform
          inputs:
            azureSubscription: myServCon
            scriptLocation: inlineScript
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            addSpnToEnvironment: true
            inlineScript: |
                export ARM_CLIENT_ID=$(client_id)
                export ARM_CLIENT_SECRET=$(client_secret)
                export ARM_SUBSCRIPTION_ID=$(subscription_id)
                export ARM_TENANT_ID=$(tenant_id)
          
        - task: TerraformCLI@0
          displayName: 'Terraform Plan'
          inputs:        
              command: 'plan'
              environmentServiceName: 'myServCon'
              allowTelemetryCollection: true
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
              
        - task: TerraformCLI@0
          displayName: Terraform Apply
          inputs:
            command: 'apply'
            environmentServiceName: 'myServCon'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            allowTelemetryCollection: true

  - stage: Build
    jobs:
      - job: Build_Artifacts
        displayName: Build Artifacts
        pool: my_Agent
        steps:
          - task: ArchiveFiles@2
            displayName: Archive Fakerestapi
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
          
          - task: PublishPipelineArtifact@1
            displayName: Publish Fakerestapi as Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
              artifactName: 'drop-fakerestapi'
              
          - task: ArchiveFiles@2
            displayName: Archive Selenium
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Artifact
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
              artifactName: 'drop-selenium'

          - task: ArchiveFiles@2
            displayName: 'Archive PerformanceTestSuite'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
          - task: PublishBuildArtifacts@1
            displayName: Publish Jmeter test
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/jtest-$(Build.BuildId).zip'
              ArtifactName: 'drop-jtest'


  - stage: Deploy 
    jobs:
      - deployment: deploy_fakerestapi
        displayName: Deploy FakeRestAPI
        pool: my_Agent
        environment: 'myEnv'
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'myServCon'
                  appType: 'webApp'
                  WebAppName: 'myProject3-AppService'
                  packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
                  DeploymentType: zipDeploy 

      - deployment: VMDeploy
        displayName: Deploy Virtual Machine
        environment:
          name: 'my_Env'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    sudo apt-get update -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    sudo apt-get install -y chromium-chromedriver
                    python3 -m pip install --upgrade pip
                    pip3 install selenium
                    # Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
                    # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
                  env: 
                    AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
                    AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
                  displayName: Configure VM 
