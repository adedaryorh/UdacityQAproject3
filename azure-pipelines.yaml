trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - images
    
name: Azure Pipeline
variables:
  - group: azsecret
    #vmImageName: 'ubuntu-latest'
stages:
  - stage: Provision
    jobs:
      - job: TerrafromTasks
        displayName: Terraform Tasks
        pool: myAgentPool
        steps:
        - task: DownloadSecureFile@1
          displayName: Download azsecret.conf file
          name: azsecret
          inputs:
            secureFile: 'azsecret.conf'
        - task: InstallSSHKey@0
          displayName: Install SSH Key
          inputs:
            knownHostsEntry: 'known_hosts'
            sshPublicKey: '$(public_key)'
            sshKeySecureFile: 'az_qa_id_rsa'
        - task: Bash@3
          displayName: 'Delete Terraform files from previous run'
          inputs:
            targetType: 'inline'
            script: |
              cd $(System.DefaultWorkingDirectory)/terraform/environments/test
              rm -rf .terraform
              rm -rf .terraform.lock.hcl
        - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
          displayName: Install Terraform
          inputs:
              terraformVersion: 'latest'
        - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: Terraform Init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            commandOptions: '-backend-config=$(azsecret.secureFilePath)'
            backendType: 'azurerm'
            backendServiceArm: 'service-connection-azurerm'
            backendAzureRmResourceGroupName: 'tfstate'
            backendAzureRmStorageAccountName: 'tfstate32363'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'terraform.tfstate'
            allowTelemetryCollection: true
          
        - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: Terraform Validates
          inputs:
            command: 'validate'
            allowTelemetryCollection: true    
        
        - task: AzureCLI@1
          displayName: Set Environment Variables for Terraform
          inputs:
            azureSubscription: 'service-connection-azurerm'
            scriptLocation: inlineScript
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            addSpnToEnvironment: true
            inlineScript: |
                export ARM_CLIENT_ID=$(client_id)
                export ARM_CLIENT_SECRET=$(client_secret)
                export ARM_SUBSCRIPTION_ID=$(subscription_id)
                export ARM_TENANT_ID=$(tenant_id)
          
        - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: 'Terraform Plan'
          inputs:        
              command: 'plan'
              environmentServiceName: 'service-connection-azurerm'
              allowTelemetryCollection: true
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
              
        - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
          displayName: Terraform Apply
          inputs:
            command: 'apply'
            environmentServiceName: 'service-connection-azurerm'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environment/test'
            allowTelemetryCollection: true

  - stage: Build
    jobs:
      - job: Build_Artifacts
        displayName: Build Artifacts
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: ArchiveFiles@2
          displayName: Archive Fakerestapi
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

        - task: PublishPipelineArtifact@1
          displayName: Publish Fakerestapi as Artifact
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
            artifactName: 'drop-fakerestapi'
        - task: ArchiveFiles@2
          displayName: Archive Selenium UI Test
          inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        - task: PublishPipelineArtifact@1
          displayName: Publish Selenium Artifact
          inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
              artifactName: 'drop-selenium'

  - stage: "Deploy"
    jobs:
      - deployment: FakeRestAPI
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'TEST'
        strategy:
          runOnce:
            deploy:
              steps:
              - script: |
                  echo "Artifact path: $(Pipeline.Workspace)/$(Build.DefinitionName)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                displayName: Print Artifact Path
              - task: AzureRmWebAppDeployment@4
                displayName: 'Deploy Azure Web App'
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'service-connection-azurerm'
                  appType: 'webApp'
                  WebAppName: 'AdexOApp-AppService'
                  packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
                  DeploymentType: zipDeploy 
      - deployment: VMDeploy
        displayName: Deploy Virtual Machine
        environment:
          name: 'TEST'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
              - bash: |
                  sudo apt-get update -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  python3 -m pip install --upgrade pip
                  pip3 install selenium
                  # Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
                  #wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
                env: 
                  AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
                  AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
                displayName: Configure VM
